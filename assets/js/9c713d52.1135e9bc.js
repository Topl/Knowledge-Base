"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[5882],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,T=m["".concat(s,".").concat(f)]||m[f]||c[f]||o;return n?r.createElement(T,i(i({ref:t},d),{},{components:n})):r.createElement(T,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},204:(e,t,n)=>{n.d(t,{ZP:()=>i});var r=n(7462),a=(n(7294),n(3905));const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To create a simple transaction you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli simple-transaction create --from-fellowship ",n.fellowship," --from-template ",n.template," --from-interaction ",n.interaction," -t $TO_ADDRESS -w $PASSWORD --port $PORT -o ",n.txFile," -n $NETWORK -a $SEND_AMOUNT -h $HOST -i ",n.keyfile," --walletdb ",n.wallet," --fee $FEE --transfer-token ",n.token)),(0,a.kt)("p",null,"This will create a transaction that spends the interaction ",(0,a.kt)("code",null,n.interaction)," of the template ",(0,a.kt)("code",null,n.template)," of the fellowship ",(0,a.kt)("code",null,n.fellowship)," and sends ",(0,a.kt)("code",null,"$SEND_AMOUNT")," levels to the address ",(0,a.kt)("code",null,"$TO_ADDRESS"),". The transaction will be stored in the file ",(0,a.kt)("code",null,n.txFile),"."))}i.isMDXComponent=!0},14:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905)),o=n(204);const i={sidebar_position:4},l="Create a Simple Transaction",s={unversionedId:"Developers/CLI/How-tos/create-simple-tx",id:"Developers/CLI/How-tos/create-simple-tx",title:"Create a Simple Transaction",description:"Transfering LVLs",source:"@site/docs/Developers/04-CLI/03-How-tos/create-simple-tx.md",sourceDirName:"Developers/04-CLI/03-How-tos",slug:"/Developers/CLI/How-tos/create-simple-tx",permalink:"/Developers/CLI/How-tos/create-simple-tx",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/04-CLI/03-How-tos/create-simple-tx.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"developersSidebar",previous:{title:"Get the Current Address",permalink:"/Developers/CLI/How-tos/current-address"},next:{title:"Prove a Transaction",permalink:"/Developers/CLI/How-tos/prove-simple-tx"}},p={},d=[{value:"Transfering LVLs",id:"transfering-lvls",level:2},{value:"Transfering Group Tokens",id:"transfering-group-tokens",level:2}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-simple-transaction"},"Create a Simple Transaction"),(0,a.kt)("h2",{id:"transfering-lvls"},"Transfering LVLs"),(0,a.kt)(o.ZP,{fellowship:"$FROM_FELLOWSHIP",template:"$LOCK_TEMPLATE",interaction:"$INTERACTION_NR",token:"$TOKEN_TYPE",wallet:"$WALLET",keyfile:"$MAIN_KEY",txFile:"$TX_FILE",mdxType:"SimpleLvlTx"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--from-interaction")," parameter is only required if the fellowship is ",(0,a.kt)("inlineCode",{parentName:"p"},"nofellowship"),". If the fellowship is ",(0,a.kt)("inlineCode",{parentName:"p"},"self"),", or any template where there is at least one fellowship, then the ",(0,a.kt)("inlineCode",{parentName:"p"},"--from-interaction")," parameter is not required."),(0,a.kt)("p",null,"We can pass the parameters ",(0,a.kt)("inlineCode",{parentName:"p"},"--change-fellowship"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--change-template"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"--change-interaction"),"\nif we want to send the change to a different fellowship, template and interaction. If these parameters are not provided, the change will be sent to the same fellowship, template and the next interaction\nof the template/fellowship pair. The transfers starting from the ",(0,a.kt)("inlineCode",{parentName:"p"},"nofellowship")," fellowship require the change parameters to be provided."),(0,a.kt)("p",null,"Alternatively, instead of providing an output address, the fellowship and template of the output can be used instead. To do this, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-transaction create --from-fellowship $FROM_FELLOWSHIP --from-template $FROM_LOCK_TEMPLATE --from-interaction $INTERACTION_NR --to-fellowship $TO_FELLOWSHIP --to-template $TO_LOCK_TEMPLATE -w $PASSWORD --port $PORT -o $TX_FILE -n $NETWORK -a $SEND_AMOUNT -h $HOST -i $MAIN_KEY --walletdb $WALLET\n")),(0,a.kt)("p",null,"This will create a transaction that spends the interaction ",(0,a.kt)("inlineCode",{parentName:"p"},"$INTERACTION_NR")," of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"$FROM_LOCK_TEMPLATE")," of the fellowship ",(0,a.kt)("inlineCode",{parentName:"p"},"$FROM_FELLOWSHIP")," and sends ",(0,a.kt)("inlineCode",{parentName:"p"},"$SEND_AMOUNT")," polys to the template ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_LOCK_TEMPLATE")," of the fellowship ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_FELLOWSHIP"),". The transaction will be stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"$TX_FILE"),". If no interaction is provided, the next interaction will be used\nas defined in the cartesian indexing."),(0,a.kt)("h2",{id:"transfering-group-tokens"},"Transfering Group Tokens"),(0,a.kt)("p",null,"To transfer group tokens, you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-transaction create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE --from-interaction $INTERACTION_NR -t $TO_ADDRESS -w $PASSWORD --port $PORT -o $TX_FILE -n $NETWORK -a $SEND_AMOUNT -h $HOST -i $MAIN_KEY --walletdb $WALLET --fee $FEE --transfer-token group --group-id $GROUP_ID\n")),(0,a.kt)("p",null,"This will create a transaction that spends the interaction ",(0,a.kt)("inlineCode",{parentName:"p"},"$INTERACTION_NR")," of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"$LOCK_TEMPLATE")," of the fellowship ",(0,a.kt)("inlineCode",{parentName:"p"},"$FELLOWSHIP")," and sends ",(0,a.kt)("inlineCode",{parentName:"p"},"$SEND_AMOUNT")," group tokens to the address ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_ADDRESS"),". The transaction will be stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"$TX_FILE"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"--group-id")," parameter is required to specify the group token to transfer.\t"),(0,a.kt)("h1",{id:"transfering-series-tokens"},"Transfering Series Tokens"),(0,a.kt)("p",null,"To transfer series tokens, you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-transaction create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE --from-interaction $INTERACTION_NR -t $TO_ADDRESS -w $PASSWORD --port $PORT -o $TX_FILE -n $NETWORK -a $SEND_AMOUNT -h $HOST -i $MAIN_KEY --walletdb $WALLET --fee $FEE --transfer-token series --series-id $SERIES_ID\n")),(0,a.kt)("p",null,"This will create a transaction that spends the interaction ",(0,a.kt)("inlineCode",{parentName:"p"},"$INTERACTION_NR")," of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"$LOCK_TEMPLATE")," of the fellowship ",(0,a.kt)("inlineCode",{parentName:"p"},"$FELLOWSHIP")," and sends ",(0,a.kt)("inlineCode",{parentName:"p"},"$SEND_AMOUNT")," series tokens to the address ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_ADDRESS"),". The transaction will be stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"$TX_FILE"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"--series-id")," parameter is required to specify the series token to transfer."),(0,a.kt)("h1",{id:"transfering-asset-tokens"},"Transfering Asset Tokens"),(0,a.kt)("p",null,"To transfer asset tokens, you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-transaction create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE --from-interaction $INTERACTION_NR -t $TO_ADDRESS -w $PASSWORD --port $PORT -o $TX_FILE -n $NETWORK -a $SEND_AMOUNT -h $HOST -i $MAIN_KEY --walletdb $WALLET --fee $FEE --transfer-token asset --group-id $GROUP_ID --series-id $SERIES_ID\n")),(0,a.kt)("p",null,"This will create a transaction that spends the interaction ",(0,a.kt)("inlineCode",{parentName:"p"},"$INTERACTION_NR")," of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"$LOCK_TEMPLATE")," of the fellowship ",(0,a.kt)("inlineCode",{parentName:"p"},"$FELLOWSHIP")," and sends ",(0,a.kt)("inlineCode",{parentName:"p"},"$SEND_AMOUNT")," asset tokens to the address ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_ADDRESS"),". The transaction will be stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"$TX_FILE"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"--group-id")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--series-id")," parameters are required to specify the group and series tokens to transfer. The asset is described by the pair ",(0,a.kt)("inlineCode",{parentName:"p"},"(group_id, series_id)"),"."))}m.isMDXComponent=!0}}]);