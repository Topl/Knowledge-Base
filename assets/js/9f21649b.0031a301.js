"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[726],{622:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>x,frontMatter:()=>d,metadata:()=>u,toc:()=>w});var i=n(4848),r=n(8453);function s(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"To sync the wallet run the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"brambl-cli wallet sync --template-name $LOCK_TEMPLATE_NAME --fellowship-name $FELLOWSHIP_NAME --walletdb $WALLET -n $NETWORK -h $HOST --port $PORT --keyfile $KEYFILE -w $PASSWORD\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This will sync the wallet for the fellowship ",(0,i.jsx)(t.code,{children:"$FELLOWSHIP_NAME"})," and template ",(0,i.jsx)(t.code,{children:"$LOCK_TEMPLATE_NAME"})," with the bifrost node running on ",(0,i.jsx)(t.code,{children:"$HOST"})," on port ",(0,i.jsx)(t.code,{children:"$PORT"}),". The keyfile ",(0,i.jsx)(t.code,{children:"$KEYFILE"})," is used to derive keys. The password for the wallet is ",(0,i.jsx)(t.code,{children:"$PASSWORD"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The procedure for the sync is the following:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"we first derive the next address for the fellowship and template"}),"\n",(0,i.jsx)(t.li,{children:"we query the node to see if the UTXOs in that address are spent"}),"\n",(0,i.jsx)(t.li,{children:"if the UTXOs are spent, then we derive the next address and repeat the process"}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}function o(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Each time a transaction is created a new interaction is created. To list all the interactions of a given wallet for a given fellowship and template, use the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"brambl-cli wallet list-interactions --walletdb $WALLETDB --fellowship-name $FELLOWSHIP --template-name $TEMPLATE\n"})}),"\n",(0,i.jsx)(t.p,{children:"The result is given in the following format:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"<fellowship id> <template id> <interaction id> <address at the location>\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function c(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Each time a transaction is created a new interaction is created. Sometimes\nthe transaction might not be useful or might be invalid. In this case, the\ninteraction can be reset. This command will set the interaction to a given value."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"brambl-cli wallet set-interaction  --walletdb $WALLET_DB --from-fellowship $FELLOWSHIP --from-template $TEMPLATE --from-interaction $NEW_INTERACTION\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}const d={sidebar_position:5},p="Recover Wallet",u={id:"Developers/Quickstart Tutorial/recover-wallet",title:"Recover Wallet",description:"In this tutorial, we learn how to recover the wallet after there was an",source:"@site/docs/Developers/02-Quickstart Tutorial/recover-wallet.md",sourceDirName:"Developers/02-Quickstart Tutorial",slug:"/Developers/Quickstart Tutorial/recover-wallet",permalink:"/Developers/Quickstart Tutorial/recover-wallet",draft:!1,unlisted:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/02-Quickstart Tutorial/recover-wallet.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"developersSidebar",previous:{title:"Minting an Asset",permalink:"/Developers/Quickstart Tutorial/mint-asset"},next:{title:"Run on Bare Metal",permalink:"/Developers/Node Setup/install-bare-metal"}},m={},w=[{value:"Diagnosing the Problem",id:"diagnosing-the-problem",level:2},{value:"Syncing the Wallet",id:"syncing-the-wallet",level:2},{value:"Listing Interactions",id:"listing-interactions",level:2},{value:"Setting the Current Interaction",id:"setting-the-current-interaction",level:2},{value:"Conclusion",id:"conclusion",level:2}];function f(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"recover-wallet",children:"Recover Wallet"}),"\n",(0,i.jsx)(t.p,{children:"In this tutorial, we learn how to recover the wallet after there was an\nerror submitting it. This happens for example if you try to submit a\ntransaction and it fails at broadcast time or at the node."}),"\n",(0,i.jsxs)(t.p,{children:["When this happens, the wallet might be in a state where the current interaction\nlocally is not the same as the current interaction on the node. ",(0,i.jsx)(t.code,{children:"brambl-cli"}),"\noffers several ways to diagnose and recover the wallet."]}),"\n",(0,i.jsx)(t.h2,{id:"diagnosing-the-problem",children:"Diagnosing the Problem"}),"\n",(0,i.jsx)(t.p,{children:"The first step is to diagnose the problem. A symptom that your wallet is\nnot in sync with the node is that checking the balance on an address\ndoes not match the expected balance."}),"\n",(0,i.jsxs)(t.p,{children:["For example, if you check the balance of an address and it shows 0, but\nyou know that the address has funds, then the wallet is not in sync with\nthe node. This can happen because the lock template of that address is shared\nwith another wallet and the other wallet has already spent the funds. If this\nhappens, you can sync the wallet with the node using the ",(0,i.jsx)(t.code,{children:"sync"})," command.\nThe sync command will update the wallet with the current state of the node."]}),"\n",(0,i.jsxs)(t.p,{children:["Another symptom is that you try to submit a transaction and it fails\nwith an error that no UTXOs are available. This can happen if you created a\ntransaction and never submitted it. What happened here, is that the wallet\nmoved to the next interaction internally, and thus is not checking the correct\naddress. You can check list of interactions using the ",(0,i.jsx)(t.code,{children:"wallet list-interactions"}),"\ncommand. You can then use the ",(0,i.jsx)(t.code,{children:"wallet set-interaction"})," command to set the\ncurrent interaction to the correct one."]}),"\n",(0,i.jsx)(t.h2,{id:"syncing-the-wallet",children:"Syncing the Wallet"}),"\n",(0,i.jsx)(a,{}),"\n",(0,i.jsx)(t.h2,{id:"listing-interactions",children:"Listing Interactions"}),"\n",(0,i.jsx)(l,{}),"\n",(0,i.jsx)(t.p,{children:"Using this feature you can get the addresses at each interaction and check\nif the address you are trying to use is the correct one."}),"\n",(0,i.jsx)(t.h2,{id:"setting-the-current-interaction",children:"Setting the Current Interaction"}),"\n",(0,i.jsx)(h,{}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"Using these commands you can recover your wallet and continue using it."}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Find more information here! ",(0,i.jsx)(t.a,{href:"https://topl.github.io/brambl-cli/",children:"Brambl-cli Documentation"})]})})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);