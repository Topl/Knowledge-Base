"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[526],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?l.createElement(m,r(r({ref:t},c),{},{components:n})):l.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>T,frontMatter:()=>d,keyfile:()=>w,metadata:()=>h,toc:()=>f,txFile:()=>y,txFileProved:()=>v,wallet:()=>k});var l=n(7462),a=(n(7294),n(3905)),o=n(1329),r=n(8232),i=n(8491),s=n(204),p=n(6188),c=n(1570);const d={id:"fund-wallet",title:"Funding Your Wallet",slug:"fund-wallet"},u="Funding Your Wallet",h={unversionedId:"Developers/Quickstart Tutorial/fund-wallet",id:"Developers/Quickstart Tutorial/fund-wallet",title:"Funding Your Wallet",description:"In this tutorial we learn how to fund your wallet using the brambl-cli. We",source:"@site/docs/Developers/02-Quickstart Tutorial/02-fund-wallet.md",sourceDirName:"Developers/02-Quickstart Tutorial",slug:"/Developers/Quickstart Tutorial/fund-wallet",permalink:"/Developers/Quickstart Tutorial/fund-wallet",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/02-Quickstart Tutorial/02-fund-wallet.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"fund-wallet",title:"Funding Your Wallet",slug:"fund-wallet"},sidebar:"developersSidebar",previous:{title:"Setup",permalink:"/Developers/Quickstart Tutorial/setup"},next:{title:"Creating Transactions",permalink:"/Developers/Quickstart Tutorial/create-tx"}},m={},f=[{value:"Initialize a Wallet",id:"initialize-a-wallet",level:2},{value:"Getting Your Address",id:"getting-your-address",level:2},{value:"Create the Transaction",id:"create-the-transaction",level:2},{value:"Prove the Transaction",id:"prove-the-transaction",level:2},{value:"Broadcast the Transaction",id:"broadcast-the-transaction",level:2},{value:"Check the Balance",id:"check-the-balance",level:2}],k="wallet.db",w="keyfile.json",y="genesisTx.pbuf",v="genesisTxProved.pbuf",b={toc:f,wallet:k};function T(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"funding-your-wallet"},"Funding Your Wallet"),(0,a.kt)("p",null,"In this tutorial we learn how to fund your wallet using the brambl-cli. We\nassume here that the wallet is already initialized and the funds are locked\nby a height lock ",(0,a.kt)("inlineCode",{parentName:"p"},"threshold(1, height(1, 9223372036854775807))"),"."),(0,a.kt)("h2",{id:"initialize-a-wallet"},"Initialize a Wallet"),(0,a.kt)(r.ZP,{wallet:k,keyfile:w,mnemonic:"mnemonic.txt",mdxType:"InitializeWallet"}),(0,a.kt)("h2",{id:"getting-your-address"},"Getting Your Address"),(0,a.kt)(o.ZP,{wallet:k,fellowship:"self",template:"default",interaction:"1",mdxType:"CurrentAddress"}),(0,a.kt)("p",null,"We are using the fellowship ",(0,a.kt)("inlineCode",{parentName:"p"},"self")," which is included in the wallet by default\nand the template ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," which is also included in the wallet by default.\n",(0,a.kt)("inlineCode",{parentName:"p"},"self")," is a fellowship that only contains one fellow, the owner of the wallet.\n",(0,a.kt)("inlineCode",{parentName:"p"},"default")," is a template that correspond to the quivr contract ",(0,a.kt)("inlineCode",{parentName:"p"},"threshold(1, sign(0))"),". "),(0,a.kt)("p",null,"The interaction ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," is the first interaction of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"default"),". If you\nhave several interactions already in your wallet, you can just omit the ",(0,a.kt)("inlineCode",{parentName:"p"},"--from-interaction"),"\nparameter and the CLI will use the last interaction of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,a.kt)("p",null,"We use the address we get to create the transaction as ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_ADDRESS"),"."),(0,a.kt)("h2",{id:"create-the-transaction"},"Create the Transaction"),(0,a.kt)(s.ZP,{fellowship:"nofellowship",template:"genesis",interaction:"1",wallet:k,token:"lvl",keyfile:w,txFile:y,mdxType:"SimpleLvlTx"}),(0,a.kt)("h2",{id:"prove-the-transaction"},"Prove the Transaction"),(0,a.kt)(i.ZP,{txFile:y,keyfile:w,txFileProved:v,txFile:y,wallet:k,mdxType:"ProveSimpleLvlTx"}),(0,a.kt)("h2",{id:"broadcast-the-transaction"},"Broadcast the Transaction"),(0,a.kt)(p.ZP,{txFileProved:v,mdxType:"BroadcastTx"}),(0,a.kt)("h2",{id:"check-the-balance"},"Check the Balance"),(0,a.kt)(c.ZP,{fellowship:"self",template:"default",wallet:k,mdxType:"CheckBalance"}),(0,a.kt)("p",null,"The result should be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"LVL: 1000\n")))}T.isMDXComponent=!0},6188:(e,t,n)=>{n.d(t,{ZP:()=>r});var l=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To broadcast a simple transaction run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli tx broadcast -i ",n.txFileProved," -h $HOST --port $PORT")),(0,a.kt)("p",null,"This will broadcast the transaction in the file ",(0,a.kt)("code",null,n.txFileProved)," to the network."))}r.isMDXComponent=!0},1570:(e,t,n)=>{n.d(t,{ZP:()=>r});var l=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can check the balance of an address using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli wallet balance --from-fellowship ",n.fellowship," --from-template ",n.template," --walletdb ",n.wallet," --host $HOST --port $PORT")),(0,a.kt)("p",null,"This will show you the balance of the address ",(0,a.kt)("code",null,n.fellowship)," and ",(0,a.kt)("code",null,n.template)," in the wallet ",(0,a.kt)("code",null,n.wallet)," in the node ",(0,a.kt)("code",null,"$HOST:$PORT"),". The ",(0,a.kt)("code",null,"--from-interaction")," can optionally be used to choose the interaction."))}r.isMDXComponent=!0},1329:(e,t,n)=>{n.d(t,{ZP:()=>r});var l=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To get the current address of the wallet run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli wallet current-address --walletdb ",n.wallet," --from-fellowship ",n.fellowship," --from-template ",n.template," --from-interaction ",n.interaction)),(0,a.kt)("p",null,"If you have several interactions already in your wallet, you can just omit the ",(0,a.kt)("inlineCode",{parentName:"p"},"--from-interaction"),"\nparameter and the CLI will use the last interaction of the template ",(0,a.kt)("inlineCode",{parentName:"p"},"default"),"."))}r.isMDXComponent=!0},8232:(e,t,n)=>{n.d(t,{ZP:()=>r});var l=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To initialize a wallet, you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli wallet init -w $PASSWORD --passphrase $PASSPHRASE -n $NETWORK -o ",n.keyfile," --newwalletdb ",n.wallet," --mnemonicfile ",n.mnemonic)),(0,a.kt)("p",null,"This will create a new wallet with a new master key protected by a password and a passphrase. The wallet will be stored in the file specified by the ",(0,a.kt)("inlineCode",{parentName:"p"},"--newwalletdb")," option. The mnemonic will be stored in the file specified by the ",(0,a.kt)("inlineCode",{parentName:"p"},"--mnemonicfile")," option. The master key will be stored in the file specified by the ",(0,a.kt)("inlineCode",{parentName:"p"},"-o")," option. The valid values for the ",(0,a.kt)("inlineCode",{parentName:"p"},"-n")," option are ",(0,a.kt)("inlineCode",{parentName:"p"},"mainnet"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"testnet"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"private"),"."))}r.isMDXComponent=!0},8491:(e,t,n)=>{n.d(t,{ZP:()=>r});var l=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To prove a transaction run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli tx prove -w $PASSWORD --keyfile ",n.keyfile," -i ",n.txFile," -o ",n.txFileProved," --walletdb ",n.wallet)),(0,a.kt)("p",null,"This will prove the transaction in the file ",(0,a.kt)("code",null,n.txFile)," and store the result in the file ",(0,a.kt)("code",null,n.txFileProved),". The right indexes to derive the keys are taken from the wallet database."))}r.isMDXComponent=!0},204:(e,t,n)=>{n.d(t,{ZP:()=>r});var l=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To create a simple transaction you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"brambl-cli simple-transaction create --from-fellowship ",n.fellowship," --from-template ",n.template," --from-interaction ",n.interaction," -t $TO_ADDRESS -w $PASSWORD --port $PORT -o ",n.txFile," -n $NETWORK -a $SEND_AMOUNT -h $HOST -i ",n.keyfile," --walletdb ",n.wallet," --fee $FEE --transfer-token ",n.token)),(0,a.kt)("p",null,"This will create a transaction that spends the interaction ",(0,a.kt)("code",null,n.interaction)," of the template ",(0,a.kt)("code",null,n.template)," of the fellowship ",(0,a.kt)("code",null,n.fellowship)," and sends ",(0,a.kt)("code",null,"$SEND_AMOUNT")," levels to the address ",(0,a.kt)("code",null,"$TO_ADDRESS"),". The transaction will be stored in the file ",(0,a.kt)("code",null,n.txFile),"."))}r.isMDXComponent=!0}}]);