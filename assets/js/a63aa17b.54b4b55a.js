"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[2197],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),f=p(n),u=o,d=f["".concat(l,".").concat(u)]||f[u]||c[u]||r;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:15},i="Mint a Asset Tokens",s={unversionedId:"Developers/CLI/How-tos/mint-assets",id:"Developers/CLI/How-tos/mint-assets",title:"Mint a Asset Tokens",description:"To create a simple minting transaction of asset tokens we run the following",source:"@site/docs/Developers/04-CLI/03-How-tos/mint-assets.md",sourceDirName:"Developers/04-CLI/03-How-tos",slug:"/Developers/CLI/How-tos/mint-assets",permalink:"/Developers/CLI/How-tos/mint-assets",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/04-CLI/03-How-tos/mint-assets.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"developersSidebar",previous:{title:"Mint a Series Constructor Token",permalink:"/Developers/CLI/How-tos/mint-series"},next:{title:"Inspecting a Transaction",permalink:"/Developers/CLI/How-tos/inspect-tx"}},l={},p=[{value:"Example of asset minting statement file format",id:"example-of-asset-minting-statement-file-format",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mint-a-asset-tokens"},"Mint a Asset Tokens"),(0,o.kt)("p",null,"To create a simple minting transaction of asset tokens we run the following\ncommand:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-minting create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE  -h $HOST --port $PORT -n private --keyfile $KEYFILE -w $PASSWORD -o $MINTING_TX -i $AMS --fee $FEE_AMOUNT --walletdb $WALLET_DB --mint-token asset\n")),(0,o.kt)("p",null,"This will create a minting transaction for the fellowship ",(0,o.kt)("inlineCode",{parentName:"p"},"$FELLOWSHIP")," and template ",(0,o.kt)("inlineCode",{parentName:"p"},"$LOCK_TEMPLATE")," and store the result in the file ",(0,o.kt)("inlineCode",{parentName:"p"},"$MINTING_TX"),". The keyfile ",(0,o.kt)("inlineCode",{parentName:"p"},"$KEYFILE")," is used to derive keys. The password for the wallet is ",(0,o.kt)("inlineCode",{parentName:"p"},"$PASSWORD"),". The asset minting statement file is ",(0,o.kt)("inlineCode",{parentName:"p"},"$AMS"),". The fee amount is ",(0,o.kt)("inlineCode",{parentName:"p"},"$FEE_AMOUNT"),". Please note that the amount of tokens to mint is specified in the asset minting statement file."),(0,o.kt)("p",null,"The asset minting also supports a commitment and metadata. These can be added to the statement as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-minting create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE  -h $HOST --port $PORT -n private --keyfile $KEYFILE -w $PASSWORD -o $MINTING_TX -i $AMS --fee $FEE_AMOUNT --walletdb $WALLET_DB --mint-token asset\n--commitment $COMMITMENT --ephemeralMetadata $EPHEMERAL_METADATA_FILE\n")),(0,o.kt)("p",null,"The commitment is a 32 byte hexadecimal string. The ephemeral metadata is a JSON file containing the metadata for the ephemeral metadata of the asset."),(0,o.kt)("h2",{id:"example-of-asset-minting-statement-file-format"},"Example of asset minting statement file format"),(0,o.kt)("p",null,"An asset minting statement looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"groupTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#2\nseriesTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#1\nquantity: 1000\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"groupTokenUtxo")," is where the group minting token comes from. The ",(0,o.kt)("inlineCode",{parentName:"p"},"seriesTokenUtxo")," is where the series minting token comes from. The ",(0,o.kt)("inlineCode",{parentName:"p"},"quantity")," is the amount of tokens to mint. This statement also\nsupports metadata. The metadata is optional and can be added to the statement\nas follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"groupTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#2\nseriesTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#1\nquantity: 1000\npermanentMetadata:\n  tickerName: TST\n  name: Test Token\n  description: Test Token Description\n")))}c.isMDXComponent=!0}}]);