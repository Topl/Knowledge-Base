"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[8871],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||i;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:14},a="Mint a Series Constructor Token",s={unversionedId:"Developers/CLI/How-tos/mint-series",id:"Developers/CLI/How-tos/mint-series",title:"Mint a Series Constructor Token",description:"To create a simple minting transaction of series constructor tokens we run the",source:"@site/docs/Developers/04-CLI/03-How-tos/mint-series.md",sourceDirName:"Developers/04-CLI/03-How-tos",slug:"/Developers/CLI/How-tos/mint-series",permalink:"/Developers/CLI/How-tos/mint-series",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/04-CLI/03-How-tos/mint-series.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"developersSidebar",previous:{title:"Mint a Group Constructor Token",permalink:"/Developers/CLI/How-tos/mint-group"},next:{title:"Mint a Asset Tokens",permalink:"/Developers/CLI/How-tos/mint-assets"}},l={},p=[{value:"Example of series policy file format",id:"example-of-series-policy-file-format",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mint-a-series-constructor-token"},"Mint a Series Constructor Token"),(0,o.kt)("p",null,"To create a simple minting transaction of series constructor tokens we run the\nfollowing command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-minting create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE  -h $HOST --port $PORT -n private --keyfile $KEYFILE -w $PASSWORD -o $MINTING_TX -i $SERIES_POLICY  -a $AMOUN_TOKENS_TO_MINT --fee $FEE_AMOUNT --walletdb $WALLET_DB --mint-token series\n")),(0,o.kt)("p",null,"This will create a minting transaction for the fellowship ",(0,o.kt)("inlineCode",{parentName:"p"},"$FELLOWSHIP")," and template ",(0,o.kt)("inlineCode",{parentName:"p"},"$LOCK_TEMPLATE")," and store the result in the file ",(0,o.kt)("inlineCode",{parentName:"p"},"$MINTING_TX"),". The keyfile ",(0,o.kt)("inlineCode",{parentName:"p"},"$KEYFILE")," is used to derive keys. The password for the wallet is ",(0,o.kt)("inlineCode",{parentName:"p"},"$PASSWORD"),". The series policy file is ",(0,o.kt)("inlineCode",{parentName:"p"},"$SERIES_POLICY"),". The amount of tokens to mint is ",(0,o.kt)("inlineCode",{parentName:"p"},"$AMOUN_TOKENS_TO_MINT"),". The fee amount is ",(0,o.kt)("inlineCode",{parentName:"p"},"$FEE_AMOUNT"),"."),(0,o.kt)("h2",{id:"example-of-series-policy-file-format"},"Example of series policy file format"),(0,o.kt)("p",null,"A simple series policy looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"label: Alice Series\nregistrationUtxo: 33HxStncsrptPB3ffkGpJNmoYwkkURvhiw92afWzjV3B#0\nfungibility: group-and-series\nquantityDescriptor: liquid\n")),(0,o.kt)("p",null,"A series policy with metadata looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"label: Alice Series\nregistrationUtxo: 33HxStncsrptPB3ffkGpJNmoYwkkURvhiw92afWzjV3B#0\nfungibility: group-and-series\nquantityDescriptor: liquid\npermanentMetadata:\n  type: object\n  properties:\n    name:\n      type: string\n    tickerName:\n      type: string\n    description:\n      type: string\nephemeralMetadata:\n  type: object\n  properties:\n    url:\n      type: string\n    image:\n      type: string\n")))}m.isMDXComponent=!0}}]);