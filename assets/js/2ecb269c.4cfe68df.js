"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[9089],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>f});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),u=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(i,".").concat(f)]||d[f]||p[f]||a;return n?t.createElement(m,l(l({ref:r},c),{},{components:n})):t.createElement(m,l({ref:r},c))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2180:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=n(7462),o=(n(7294),n(3905));const a={sidebar_position:3},l="Genus Query Mode",s={unversionedId:"Developers/CLI/cli-reference/genus-query-mode",id:"Developers/CLI/cli-reference/genus-query-mode",title:"Genus Query Mode",description:"",source:"@site/docs/Developers/04-CLI/04-cli-reference/genus-query-mode.md",sourceDirName:"Developers/04-CLI/04-cli-reference",slug:"/Developers/CLI/cli-reference/genus-query-mode",permalink:"/Developers/CLI/cli-reference/genus-query-mode",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/04-CLI/04-cli-reference/genus-query-mode.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"developersSidebar",previous:{title:"Template Mode",permalink:"/Developers/CLI/cli-reference/contract-mode"},next:{title:"Bifrost Query Mode",permalink:"/Developers/CLI/cli-reference/bifrost-query-mode"}},i={},u=[],c={toc:u};function p(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"genus-query-mode"},"Genus Query Mode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Command: genus-query [utxo-by-address]\nGenus query mode\nCommand: genus-query utxo-by-address [options]\nQuery utxo\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Bifrost node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  --from-address <value>   Address where we are sending the funds from\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --token <value>          The token type. The valid token types are 'lvl', 'topl', 'asset', 'group', 'series', and 'all'\n")))}p.isMDXComponent=!0}}]);