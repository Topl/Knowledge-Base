"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[5142],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,b=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={id:"brambl-dart",title:"BramblDart",tags:["brambl","dart","sdk"]},o=void 0,s={unversionedId:"Developers/Brambl SDK/brambl-dart",id:"Developers/Brambl SDK/brambl-dart",title:"BramblDart",description:"A Dart library that supports the Topl blockchain.",source:"@site/docs/Developers/Brambl SDK/dart.md",sourceDirName:"Developers/Brambl SDK",slug:"/Developers/Brambl SDK/brambl-dart",permalink:"/Developers/Brambl SDK/brambl-dart",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/Brambl SDK/dart.md",tags:[{label:"brambl",permalink:"/tags/brambl"},{label:"dart",permalink:"/tags/dart"},{label:"sdk",permalink:"/tags/sdk"}],version:"current",frontMatter:{id:"brambl-dart",title:"BramblDart",tags:["brambl","dart","sdk"]},sidebar:"developersSidebar",previous:{title:"Bifrost ScalaDocs",permalink:"/Developers/Bifrost/scala"},next:{title:"BramblSC",permalink:"/Developers/Brambl SDK/brambl-sc"}},l={},d=[{value:"Features",id:"features",level:3},{value:"Usage",id:"usage",level:2},{value:"Credentials and Wallets",id:"credentials-and-wallets",level:3},{value:"Custom credentials",id:"custom-credentials",level:4},{value:"Connecting to an RPC server",id:"connecting-to-an-rpc-server",level:3},{value:"Sending transactions",id:"sending-transactions",level:2},{value:"Feature requests and bugs",id:"feature-requests-and-bugs",level:2},{value:"Develop",id:"develop",level:2},{value:"Contribute",id:"contribute",level:2},{value:"Additional Examples",id:"additional-examples",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://www.dartlang.org"},"Dart")," library that supports the ",(0,r.kt)("a",{parentName:"p",href:"https://topl.co"},"Topl")," blockchain."),(0,r.kt)("h1",{id:"brambldart"},"BramblDart"),(0,r.kt)("p",null,"A dart library that connects via gRPC to interact with the Topl blockchain. It connects\nto a Bifrost node to send transactions, interact with addresses and much\nmore!"),(0,r.kt)("h3",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connect to an Topl node with the rpc-api, call common methods"),(0,r.kt)("li",{parentName:"ul"},"Send signed Topl transactions"),(0,r.kt)("li",{parentName:"ul"},"Generate private keys, setup new Topl addresses")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h1",{id:"running-the-code-generator"},"Running the code generator"),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"dart run build_runner build")," in the package directory to generate the missing ",(0,r.kt)("inlineCode",{parentName:"p"},".g.dart"),"generated dart files"),(0,r.kt)("h3",{id:"credentials-and-wallets"},"Credentials and Wallets"),(0,r.kt)("p",null,"In order to send transactions on the Topl network, some credentials\nare required. The library supports raw private keys and v1 encrypted key-files.\nIn addition, it also supports the generation of keys via a HD wallet. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"\nimport 'package:brambldart/brambldart.dart';\n\n// You can create credentials from private keys\nCredentials credentials = ToplSigningKey.fromString(\"base58EncodedPrivateKeyHere\");\n\n// Or generate a new key randomly\nvar networkId = 0x40;\nvar propositionType = PropositionType.ed25519();\nCredentials random = ToplSigningKey.createRandom(networkId, propositionType);\n\n// In either way, the library can derive the public key and the address\n// from a private key:\n\nvar address = await credentials.extractAddress();\nprint(address.toBase58());\n\n")),(0,r.kt)("p",null,"Another way to obtain ",(0,r.kt)("inlineCode",{parentName:"p"},"Credentials")," which the library uses to sign\ntransactions is the usage of an encrypted keyfile. Wallets store a private\nkey securely and require a password to unlock. The library has experimental\nsupport for version 1 keyfiles which are generated by this client and support Extended ED25519 Signing Keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:io';\nimport 'package:brambldart/brambldart.dart';\n\nString content = new File(\"wallet.json\").readAsStringSync();\nKeyStore keystore = KeyStore.fromV1Json(content, \"testPassword\");\n\nCredentials unlocked = ToplSigningKey.fromString(keystore.privateKey);\n// You can now use these credentials to sign transactions\n")),(0,r.kt)("p",null,"You can also create Keystore files with this library. To do so, you first need\nthe private key you want to encrypt and a desired password. Then, create\nyour wallet with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Keystore keystore = KeyStore.createNew(credentials, 'password', random);\nprint(keystore.toJson());\n")),(0,r.kt)("p",null,"You can also write ",(0,r.kt)("inlineCode",{parentName:"p"},"keystore.toJson()")," to file which you can later open with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Topl/Bifrost/wiki/BramblSc-examples"},"BramblSC")," and potentially other Topl API libraries in the future."),(0,r.kt)("h4",{id:"custom-credentials"},"Custom credentials"),(0,r.kt)("p",null,"If you want to integrate ",(0,r.kt)("inlineCode",{parentName:"p"},"brambldart")," with other wallet providers, you can implement\n",(0,r.kt)("inlineCode",{parentName:"p"},"Credentials")," and override the appropriate methods."),(0,r.kt)("h3",{id:"connecting-to-an-rpc-server"},"Connecting to an RPC server"),(0,r.kt)("p",null,"The library won't send signed transactions to forgers itself. Instead,\nit relies on an RPC client to do that. You can use a public RPC API like\n",(0,r.kt)("a",{parentName:"p",href:"https://beta.topl.services"},"baas"),", or, if you just want to test things out, use a private testnet with\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.topl.co/v1.4.0/docs/installing-bifrost"},"bifrost"),". All of these options will give you\nan RPC endpoint to which the library can connect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dio/dio.dart'; //You can also import the browser version\nimport 'package:brambldart/brambldart.dart';\n\nvar networkId = 0x40;\nvar propositionType = PropositionType.ed25519();\nvar privateKey = 'base58EncodedPrivateKey';\n\nvar apiUrl = \"http://localhost:9085\"; //Replace with your API\nvar httpClient = Dio(BaseOptions(\n                    baseUrl: basePathOverride ?? basePath,\n                    contentType: 'application/json',\n                    connectTimeout: 5000,\n                    receiveTimeout: 3000)\nvar bramblClient = BramblClient(httpClient: httpClient, basePathOverride: apiUrl);\nvar credentials = bramblClient.credentialsFromPrivateKey(privateKey, networkId, propositionType);\n\n// You can now call rpc methods. This one will query the amount of Topl tokens you own\nBalance balance = bramblClient.getBalance(credentials.address);\nprint(balance.toString());\n")),(0,r.kt)("h2",{id:"sending-transactions"},"Sending transactions"),(0,r.kt)("p",null,"Of course, this library supports creating, signing and sending Topl\ntransactions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:brambldart/brambldart.dart';\n\n/// [...], you need to specify the url and your client, see example above\nvar bramblClient = BramblClient(basePathOverride: apiUrl, httpClient: httpClient);\n\nvar credentials = bramblClient.credentialsFromPrivateKey(\"0x...\");\n\nconst value = 1;\n\nfinal assetCode =\n    AssetCode.initialize(1, senderAddress, 'testy', 'valhalla');\n\nfinal securityRoot = SecurityRoot.fromBase58(\n    Base58Data.validated('11111111111111111111111111111111'));\n\nfinal assetValue = AssetValue(\n    value.toString(), assetCode, securityRoot, 'metadata', 'Asset');\n\nfinal recipient = AssetRecipient(senderAddress, assetValue);\n\nfinal data = Latin1Data.validated('data');\n\nfinal assetTransaction = AssetTransaction(\n    recipients: [recipient],\n    sender: [senderAddress],\n    changeAddress: senderAddress,\n    consolidationAddress: senderAddress,\n    propositionType: PropositionType.ed25519().propositionName,\n    minting: true,\n    assetCode: assetCode,\n    data: data);\n\nfinal rawTransaction =\n          await client.sendRawAssetTransfer(assetTransaction: assetTransaction);\n\nexpect(rawTransaction['rawTx'], isA<TransactionReceipt>());\n\nprint(rawTransaction);\n\nfinal txId = await client.sendTransaction(\n    [first],\n    rawTransaction['rawTx'] as TransactionReceipt,\n    rawTransaction['messageToSign'] as Uint8List);\n")),(0,r.kt)("p",null,"Missing data, like the fee, the sender or a change/consolidation address will be\ninferred by the BramblClient when not explicitly specified. If you only need\nthe signed transaction but don't intend to send it, you can use\n",(0,r.kt)("inlineCode",{parentName:"p"},"client.signTransaction"),"."),(0,r.kt)("h2",{id:"feature-requests-and-bugs"},"Feature requests and bugs"),(0,r.kt)("p",null,"Please file feature requests and bugs at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Topl/BramblDart/issues"},"issue tracker"),".\nIf you want to contribute to this library, please submit a Pull Request."),(0,r.kt)("h2",{id:"develop"},"Develop"),(0,r.kt)("p",null,"View the documentation at ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/topl_common/latest/"},"pub.dev"),"."),(0,r.kt)("h2",{id:"contribute"},"Contribute"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Topl/dart_topl_common"},"Open a PR here!")),(0,r.kt)("h2",{id:"additional-examples"},"Additional Examples"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Topl/bifrost-client-sample-dart"},"View an example here!")))}c.isMDXComponent=!0}}]);