"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[9378],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=m(n),f=r,c=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return n?a.createElement(c,l(l({ref:t},d),{},{components:n})):a.createElement(c,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},l="Wallet Mode",i={unversionedId:"Developers/CLI/cli-reference/wallet-mode",id:"Developers/CLI/cli-reference/wallet-mode",title:"Wallet Mode",description:"",source:"@site/docs/Developers/04-CLI/04-cli-reference/wallet-mode.md",sourceDirName:"Developers/04-CLI/04-cli-reference",slug:"/Developers/CLI/cli-reference/wallet-mode",permalink:"/Developers/CLI/cli-reference/wallet-mode",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/04-CLI/04-cli-reference/wallet-mode.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"developersSidebar",previous:{title:"Bifrost Query Mode",permalink:"/Developers/CLI/cli-reference/bifrost-query-mode"},next:{title:"Transaction Mode",permalink:"/Developers/CLI/cli-reference/transaction-mode"}},s={},m=[],d={toc:m};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wallet-mode"},"Wallet Mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Command: wallet [balance|set-interaction|list-interactions|sync|init|recover-keys|current-address|export-vk|import-vks]\nWallet mode\nCommand: wallet balance [options]\nGet balance of wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Bifrost node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  --from-address <value>   Address where we are sending the funds from\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet set-interaction [options]\nSet the current interaction\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet list-interactions [options]\nList the interactions for a given fellowship and template\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet sync [options]\nSync wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Bifrost node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet init [options]\nInitialize wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --newwalletdb <value>    Wallet DB file. (mandatory)\n  -P, --passphrase <value>\n                           Passphrase for the encrypted key. (optional))\n  --mnemonicfile <value>   Mnemonic output file. (mandatory)\nCommand: wallet recover-keys [options]\nRecover Wallet Main Key\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -m, --mnemonic <value>   Mnemonic for the key. (mandatory)\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --newwalletdb <value>    Wallet DB file. (mandatory)\n  -P, --passphrase <value>\n                           Passphrase for the encrypted key. (optional))\nCommand: wallet current-address [options]\nObtain current address\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\nCommand: wallet export-vk [options]\nExport verification key\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --interaction <value>    Interaction from where we are sending the funds from\nCommand: wallet import-vks [options]\nImport verification key\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --input-vks <value>      The keys to import. (mandatory)\n")))}p.isMDXComponent=!0}}]);