"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[7861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,u=d["".concat(s,".").concat(f)]||d[f]||h[f]||i;return n?a.createElement(u,r(r({ref:t},p),{},{components:n})):a.createElement(u,r({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:3},r="Conversation",l={unversionedId:"Developers/CLI/concepts/conversations",id:"Developers/CLI/concepts/conversations",title:"Conversation",description:"To understand the concept of conversation, we first need to understand the",source:"@site/docs/Developers/04-CLI/02-concepts/conversations.md",sourceDirName:"Developers/04-CLI/02-concepts",slug:"/Developers/CLI/concepts/conversations",permalink:"/Developers/CLI/concepts/conversations",draft:!1,editUrl:"https://github.com/Topl/knowledge-base/edit/main/docs/Developers/04-CLI/02-concepts/conversations.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"developersSidebar",previous:{title:"Locks",permalink:"/Developers/CLI/concepts/locks"},next:{title:"How Tos",permalink:"/category/how-tos"}},s={},c=[{value:"Interaction",id:"interaction",level:2},{value:"Conversation",id:"conversation-1",level:2},{value:"Conversations in the brambl-cli wallet",id:"conversations-in-the-brambl-cli-wallet",level:2}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"conversation"},"Conversation"),(0,o.kt)("p",null,"To understand the concept of conversation, we first need to understand the\nconcept of interaction."),(0,o.kt)("h2",{id:"interaction"},"Interaction"),(0,o.kt)("p",null,"A interaction is when a set of fellows agree on a set of terms. The terms are\ndefined by a lock template. The interaction is the result of the fellows providing\neach a public key to fill the placeholders in the template. A lock template\nwhere all the placeholders are filled is called a lock proposition. All interactions\nhave a lock proposition. However, not all lock propositions are interactions."),(0,o.kt)("p",null,"As a side effect of having a lock proposition associated to them,\ninteractions also have an address. This address is derived from the\ninteraction's lock proposition."),(0,o.kt)("h2",{id:"conversation-1"},"Conversation"),(0,o.kt)("p",null,"A conversation is a sequence of interactions initiated by the members of a\nfellowship (the fellows). In a conversation, when the fellows want to spend\nthe funds in an interaction, they provide a proof that they are the owners\nof the address of the interaction."),(0,o.kt)("p",null,"If they don't want to spend all the funds in an interaction, they need to put\nthe ",(0,o.kt)("em",{parentName:"p"},"change")," of the transaction in a new interaction."),(0,o.kt)("h2",{id:"conversations-in-the-brambl-cli-wallet"},"Conversations in the brambl-cli wallet"),(0,o.kt)("p",null,"The brambl-cli wallet is designed to make it easy to create conversations.\nBy default each user has a fellowship with themselves. This fellowship is\ncalled ",(0,o.kt)("inlineCode",{parentName:"p"},"self"),". In the wallet, each fellowship has a unique name (like ",(0,o.kt)("inlineCode",{parentName:"p"},"self"),") and a\nunique number."),(0,o.kt)("p",null,"There is also a default template included in the wallet, the ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," template.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," template uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"sign(0)")," expression. This means that the\nit only works with fellowships of one fellow."),(0,o.kt)("p",null,"In a conversation, each interaction has a number. The number of the first\ninteraction is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),". The number of the second interaction is ",(0,o.kt)("inlineCode",{parentName:"p"},"2"),", and so on."),(0,o.kt)("p",null,"We have then, by default the interaction of the fellowship ",(0,o.kt)("inlineCode",{parentName:"p"},"self")," with the\ntemplate ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," and interaction number ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),". When the user wants to spend\nsome funds in the initial interaction, the wallet will create a new interaction\nwith the same template and the number ",(0,o.kt)("inlineCode",{parentName:"p"},"2"),". "),(0,o.kt)("p",null,"Combining the number associated with the fellowship, the template and the\ninteraction, we have a unique triple for each interaction in the wallet.\nThe wallet uses this triple to derive the right public and private keys to\nboth lock the interactions and spend them."),(0,o.kt)("p",null,"Each user has a wallet database. The wallet database stores the fellowships,\nthe templates and the interactions. Normally, each wallet will assign different\nnumbers to each fellowship, template and interaction."),(0,o.kt)("p",null,"For example, if alice has a fellowship with bob, where they are both fellows called\n",(0,o.kt)("inlineCode",{parentName:"p"},"alice_and_bob")," with number ",(0,o.kt)("inlineCode",{parentName:"p"},"3"),". Bob might have a fellowship with alice, but\nboth the name and the number in Bob's wallet database might be different."),(0,o.kt)("p",null,"The same happens with templates and interactions. The wallet database of each\nuser will assign different numbers to each template and interaction."),(0,o.kt)("p",null,"Given a fellowship and a template, ",(0,o.kt)("inlineCode",{parentName:"p"},"brambl-cli")," allows to export a base verification\nkey to be shared with another wallet. This base verification key is used to derive\nthe right keys to lock and spend the interactions in the shared fellowships and templates."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"brambl-cli")," also allows to import the base verification keys of other fellows\nin a given fellowship in a new conversation. The conversation is identified\nby both the name of the fellowship and the name of the template that it uses."))}h.isMDXComponent=!0}}]);